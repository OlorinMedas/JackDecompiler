<class>
	<keyword> class </keyword>
	<define_class> Memory </define_class>
	<symbol> { </symbol>
		<classVarDec>
			<keyword> static </keyword>
			<keyword> type </keyword>
			<define_static_variable_0> static_0 </define_static_variable_0>
			<symbol> ; </symbol>
		</classVarDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> void </keyword>
			<define_subroutine> init </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<letStatement>
						<keyword> let </keyword>
						<refer_static_variable_0> static_0 </refer_static_variable_0>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_static_variable_0> static_0 </refer_static_variable_0>
						<symbol> [ </symbol>
						<expression>
							<term>
								<integerConstant> 2048 </integerConstant>
							</term>
						</expression>
						<symbol> ] </symbol>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 14334 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_static_variable_0> static_0 </refer_static_variable_0>
						<symbol> [ </symbol>
						<expression>
							<term>
								<integerConstant> 2049 </integerConstant>
							</term>
						</expression>
						<symbol> ] </symbol>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 2050 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> int </keyword>
			<define_subroutine> peek </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<refer_static_variable_0> static_0 </refer_static_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> void </keyword>
			<define_subroutine> poke </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
				<symbol> , </symbol>
				<keyword> int </keyword>
				<define_argument_variable_1> argument_1 </define_argument_variable_1>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<letStatement>
						<keyword> let </keyword>
						<refer_static_variable_0> static_0 </refer_static_variable_0>
						<symbol> [ </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
						</expression>
						<symbol> ] </symbol>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> int </keyword>
			<define_subroutine> alloc </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<varDec>
					<keyword> var </keyword>
					<keyword> type </keyword>
					<define_local_variable_0> local_0 </define_local_variable_0>
					<symbol> ; </symbol>
				</varDec>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
							<symbol> &lt; </symbol>
							<term>
								<integerConstant> 1 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 5 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_local_variable_0> local_0 </refer_local_variable_0>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 2048 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<whileStatement>
						<keyword> while </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
							<symbol> &lt; </symbol>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> [ </symbol>
										<expression>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</whileStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
									<symbol> + </symbol>
									<term>
										<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> &gt; </symbol>
							<term>
								<integerConstant> 16379 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 6 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
							<symbol> &gt; </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
									</term>
									<symbol> + </symbol>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
									</term>
									<symbol> + </symbol>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
								<symbol> = </symbol>
								<expression>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
												<symbol> [ </symbol>
												<expression>
													<term>
														<integerConstant> 0 </integerConstant>
													</term>
												</expression>
												<symbol> ] </symbol>
											</term>
											<symbol> - </symbol>
											<term>
												<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
									<symbol> - </symbol>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<ifStatement>
								<keyword> if </keyword>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> [ </symbol>
										<expression>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
									</term>
									<symbol> = </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 2 </integerConstant>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
								<symbol> ) </symbol>
								<symbol> { </symbol>
								<statements>
									<letStatement>
										<keyword> let </keyword>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> [ </symbol>
										<expression>
											<term>
												<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 3 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
										<symbol> = </symbol>
										<expression>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<refer_local_variable_0> local_0 </refer_local_variable_0>
													</term>
													<symbol> + </symbol>
													<term>
														<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 4 </integerConstant>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
								</statements>
								<symbol> } </symbol>
								<keyword> else </keyword>
								<symbol> { </symbol>
								<statements>
									<letStatement>
										<keyword> let </keyword>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> [ </symbol>
										<expression>
											<term>
												<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 3 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
										<symbol> = </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
												<symbol> [ </symbol>
												<expression>
													<term>
														<integerConstant> 1 </integerConstant>
													</term>
												</expression>
												<symbol> ] </symbol>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
								</statements>
								<symbol> } </symbol>
							</ifStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
								<symbol> = </symbol>
								<expression>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
											<symbol> + </symbol>
											<term>
												<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
									<symbol> + </symbol>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_local_variable_0> local_0 </refer_local_variable_0>
						<symbol> [ </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ] </symbol>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
							</term>
							<symbol> + </symbol>
							<term>
								<integerConstant> 2 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> void </keyword>
			<define_subroutine> deAlloc </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<refer_class> Array </refer_class>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<varDec>
					<keyword> var </keyword>
					<keyword> type </keyword>
					<define_local_variable_0> local_0 </define_local_variable_0>
					<symbol> , </symbol>
					<define_local_variable_1> local_1 </define_local_variable_1>
					<symbol> ; </symbol>
				</varDec>
				<statements>
					<letStatement>
						<keyword> let </keyword>
						<refer_local_variable_0> local_0 </refer_local_variable_0>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
							<symbol> - </symbol>
							<term>
								<integerConstant> 2 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_local_variable_1> local_1 </refer_local_variable_1>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_local_variable_1> local_1 </refer_local_variable_1>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
							<symbol> = </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
								<symbol> = </symbol>
								<expression>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
												<symbol> [ </symbol>
												<expression>
													<term>
														<integerConstant> 1 </integerConstant>
													</term>
												</expression>
												<symbol> ] </symbol>
											</term>
											<symbol> - </symbol>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
									<symbol> - </symbol>
									<term>
										<integerConstant> 2 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
						<keyword> else </keyword>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
								<symbol> = </symbol>
								<expression>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
												<symbol> [ </symbol>
												<expression>
													<term>
														<integerConstant> 1 </integerConstant>
													</term>
												</expression>
												<symbol> ] </symbol>
											</term>
											<symbol> - </symbol>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
									<symbol> + </symbol>
									<term>
										<refer_local_variable_1> local_1 </refer_local_variable_1>
										<symbol> [ </symbol>
										<expression>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<ifStatement>
								<keyword> if </keyword>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_local_variable_1> local_1 </refer_local_variable_1>
										<symbol> [ </symbol>
										<expression>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
									</term>
									<symbol> = </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_local_variable_1> local_1 </refer_local_variable_1>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 2 </integerConstant>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
								<symbol> ) </symbol>
								<symbol> { </symbol>
								<statements>
									<letStatement>
										<keyword> let </keyword>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> [ </symbol>
										<expression>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
										<symbol> = </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 2 </integerConstant>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
								</statements>
								<symbol> } </symbol>
								<keyword> else </keyword>
								<symbol> { </symbol>
								<statements>
									<letStatement>
										<keyword> let </keyword>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> [ </symbol>
										<expression>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ] </symbol>
										<symbol> = </symbol>
										<expression>
											<term>
												<refer_local_variable_1> local_1 </refer_local_variable_1>
												<symbol> [ </symbol>
												<expression>
													<term>
														<integerConstant> 1 </integerConstant>
													</term>
												</expression>
												<symbol> ] </symbol>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
								</statements>
								<symbol> } </symbol>
							</ifStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
	</class>
