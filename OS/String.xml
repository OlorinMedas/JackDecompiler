<class>
	<keyword> class </keyword>
	<define_class> String </define_class>
	<symbol> { </symbol>
		<classVarDec>
			<keyword> field </keyword>
			<keyword> type </keyword>
			<define_field_variable_0> field_0 </define_field_variable_0>
			<symbol> ; </symbol>
		</classVarDec>
		<subroutineDec>
			<keyword> constructor </keyword>
			<refer_class> String </refer_class>
			<define_subroutine> new </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
							<symbol> &lt; </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 14 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
							<symbol> &gt; </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_field_variable_1> field_1 </refer_field_variable_1>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_class> Array </refer_class>
										<symbol> . </symbol>
										<refer_subroutine> new </refer_subroutine>
										<symbol> ( </symbol>
										<expressionList>
											<expression>
												<term>
													<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
												</term>
											</expression>
										</expressionList>
										<symbol> ) </symbol>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_field_variable_0> field_0 </refer_field_variable_0>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_field_variable_2> field_2 </refer_field_variable_2>
						<symbol> = </symbol>
						<expression>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<keywordConstant> this </keywordConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> void </keyword>
			<define_subroutine> dispose </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_field_variable_0> field_0 </refer_field_variable_0>
							</term>
							<symbol> &gt; </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Array </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> dispose </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<refer_field_variable_1> field_1 </refer_field_variable_1>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Memory </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> deAlloc </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>
							<expression>
								<term>
									<keywordConstant> this </keywordConstant>
								</term>
							</expression>
						</expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> int </keyword>
			<define_subroutine> length </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> int </keyword>
			<define_subroutine> charAt </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
											</term>
											<symbol> &lt; </symbol>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
									<symbol> | </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
											</term>
											<symbol> &gt; </symbol>
											<term>
												<refer_field_variable_2> field_2 </refer_field_variable_2>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> | </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
									</term>
									<symbol> = </symbol>
									<term>
										<refer_field_variable_2> field_2 </refer_field_variable_2>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 15 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<refer_field_variable_1> field_1 </refer_field_variable_1>
								<symbol> [ </symbol>
								<expression>
									<term>
										<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> void </keyword>
			<define_subroutine> setCharAt </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
				<symbol> , </symbol>
				<keyword> char </keyword>
				<define_argument_variable_1> argument_1 </define_argument_variable_1>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
											</term>
											<symbol> &lt; </symbol>
											<term>
												<integerConstant> 0 </integerConstant>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
									<symbol> | </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
											</term>
											<symbol> &gt; </symbol>
											<term>
												<refer_field_variable_2> field_2 </refer_field_variable_2>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> | </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
									</term>
									<symbol> = </symbol>
									<term>
										<refer_field_variable_2> field_2 </refer_field_variable_2>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 16 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_field_variable_1> field_1 </refer_field_variable_1>
						<symbol> [ </symbol>
						<expression>
							<term>
								<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
							</term>
						</expression>
						<symbol> ] </symbol>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_argument_variable_2> argument_2 </refer_argument_variable_2>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> String </keyword>
			<define_subroutine> appendChar </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> char </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
							</term>
							<symbol> = </symbol>
							<term>
								<refer_field_variable_0> field_0 </refer_field_variable_0>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 17 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_field_variable_1> field_1 </refer_field_variable_1>
						<symbol> [ </symbol>
						<expression>
							<term>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
							</term>
						</expression>
						<symbol> ] </symbol>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_field_variable_2> field_2 </refer_field_variable_2>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
							</term>
							<symbol> + </symbol>
							<term>
								<integerConstant> 1 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<keywordConstant> this </keywordConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> void </keyword>
			<define_subroutine> eraseLastChar </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
							</term>
							<symbol> = </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 18 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_field_variable_2> field_2 </refer_field_variable_2>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
							</term>
							<symbol> - </symbol>
							<term>
								<integerConstant> 1 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> int </keyword>
			<define_subroutine> intValue </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<varDec>
					<keyword> var </keyword>
					<keyword> type </keyword>
					<define_local_variable_0> local_0 </define_local_variable_0>
					<symbol> , </symbol>
					<define_local_variable_1> local_1 </define_local_variable_1>
					<symbol> , </symbol>
					<define_local_variable_2> local_2 </define_local_variable_2>
					<symbol> , </symbol>
					<define_local_variable_3> local_3 </define_local_variable_3>
					<symbol> , </symbol>
					<define_local_variable_4> local_4 </define_local_variable_4>
					<symbol> ; </symbol>
				</varDec>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
							</term>
							<symbol> = </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<returnStatement>
								<keyword> return </keyword>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</returnStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_local_variable_3> local_3 </refer_local_variable_3>
						<symbol> = </symbol>
						<expression>
							<term>
								<keywordConstant> true </keywordConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_field_variable_1> field_1 </refer_field_variable_1>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
							</term>
							<symbol> = </symbol>
							<term>
								<integerConstant> 45 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_4> local_4 </refer_local_variable_4>
								<symbol> = </symbol>
								<expression>
									<term>
										<keywordConstant> true </keywordConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> = </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<whileStatement>
						<keyword> while </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
									<symbol> &lt; </symbol>
									<term>
										<refer_field_variable_2> field_2 </refer_field_variable_2>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
							<symbol> &amp; </symbol>
							<term>
								<refer_local_variable_3> local_3 </refer_local_variable_3>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_2> local_2 </refer_local_variable_2>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_field_variable_1> field_1 </refer_field_variable_1>
										<symbol> [ </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
										</expression>
										<symbol> ] </symbol>
									</term>
									<symbol> - </symbol>
									<term>
										<integerConstant> 48 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_3> local_3 </refer_local_variable_3>
								<symbol> = </symbol>
								<expression>
									<term>
										<symbol> ~ </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<refer_local_variable_2> local_2 </refer_local_variable_2>
														</term>
														<symbol> &lt; </symbol>
														<term>
															<integerConstant> 0 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
												<symbol> | </symbol>
												<term>
													<symbol> ( </symbol>
													<expression>
														<term>
															<refer_local_variable_2> local_2 </refer_local_variable_2>
														</term>
														<symbol> &gt; </symbol>
														<term>
															<integerConstant> 9 </integerConstant>
														</term>
													</expression>
													<symbol> ) </symbol>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<ifStatement>
								<keyword> if </keyword>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_local_variable_3> local_3 </refer_local_variable_3>
									</term>
								</expression>
								<symbol> ) </symbol>
								<symbol> { </symbol>
								<statements>
									<letStatement>
										<keyword> let </keyword>
										<refer_local_variable_1> local_1 </refer_local_variable_1>
										<symbol> = </symbol>
										<expression>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<refer_local_variable_1> local_1 </refer_local_variable_1>
													</term>
													<symbol> * </symbol>
													<term>
														<integerConstant> 10 </integerConstant>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
											<symbol> + </symbol>
											<term>
												<refer_local_variable_2> local_2 </refer_local_variable_2>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
									<letStatement>
										<keyword> let </keyword>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> = </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
								</statements>
								<symbol> } </symbol>
							</ifStatement>
						</statements>
						<symbol> } </symbol>
					</whileStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_local_variable_4> local_4 </refer_local_variable_4>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_1> local_1 </refer_local_variable_1>
								<symbol> = </symbol>
								<expression>
									<term>
										<symbol> - </symbol>
										<term>
											<refer_local_variable_1> local_1 </refer_local_variable_1>
										</term>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<refer_local_variable_1> local_1 </refer_local_variable_1>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> void </keyword>
			<define_subroutine> setInt </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<varDec>
					<keyword> var </keyword>
					<keyword> type </keyword>
					<define_local_variable_0> local_0 </define_local_variable_0>
					<symbol> , </symbol>
					<define_local_variable_1> local_1 </define_local_variable_1>
					<symbol> , </symbol>
					<define_local_variable_2> local_2 </define_local_variable_2>
					<symbol> , </symbol>
					<define_local_variable_3> local_3 </define_local_variable_3>
					<symbol> ; </symbol>
				</varDec>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_field_variable_0> field_0 </refer_field_variable_0>
							</term>
							<symbol> = </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 19 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_local_variable_2> local_2 </refer_local_variable_2>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_class> Array </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> new </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 6 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
							</term>
							<symbol> &lt; </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_3> local_3 </refer_local_variable_3>
								<symbol> = </symbol>
								<expression>
									<term>
										<keywordConstant> true </keywordConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
								<symbol> = </symbol>
								<expression>
									<term>
										<symbol> - </symbol>
										<term>
											<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
										</term>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<letStatement>
						<keyword> let </keyword>
						<refer_local_variable_1> local_1 </refer_local_variable_1>
						<symbol> = </symbol>
						<expression>
							<term>
								<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
							</term>
						</expression>
						<symbol> ; </symbol>
					</letStatement>
					<whileStatement>
						<keyword> while </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_local_variable_1> local_1 </refer_local_variable_1>
							</term>
							<symbol> &gt; </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_1> local_1 </refer_local_variable_1>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
									</term>
									<symbol> / </symbol>
									<term>
										<integerConstant> 10 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_2> local_2 </refer_local_variable_2>
								<symbol> [ </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
								</expression>
								<symbol> ] </symbol>
								<symbol> = </symbol>
								<expression>
									<term>
										<integerConstant> 48 </integerConstant>
									</term>
									<symbol> + </symbol>
									<term>
										<symbol> ( </symbol>
										<expression>
											<term>
												<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
											</term>
											<symbol> - </symbol>
											<term>
												<symbol> ( </symbol>
												<expression>
													<term>
														<refer_local_variable_1> local_1 </refer_local_variable_1>
													</term>
													<symbol> * </symbol>
													<term>
														<integerConstant> 10 </integerConstant>
													</term>
												</expression>
												<symbol> ) </symbol>
											</term>
										</expression>
										<symbol> ) </symbol>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
									<symbol> + </symbol>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_argument_variable_1> argument_1 </refer_argument_variable_1>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_local_variable_1> local_1 </refer_local_variable_1>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</whileStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_local_variable_3> local_3 </refer_local_variable_3>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_2> local_2 </refer_local_variable_2>
								<symbol> [ </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
								</expression>
								<symbol> ] </symbol>
								<symbol> = </symbol>
								<expression>
									<term>
										<integerConstant> 45 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
									<symbol> + </symbol>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_field_variable_0> field_0 </refer_field_variable_0>
							</term>
							<symbol> &lt; </symbol>
							<term>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 19 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
							</term>
							<symbol> = </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_field_variable_1> field_1 </refer_field_variable_1>
								<symbol> [ </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ] </symbol>
								<symbol> = </symbol>
								<expression>
									<term>
										<integerConstant> 48 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
								<symbol> = </symbol>
								<expression>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
						<keyword> else </keyword>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_field_variable_2> field_2 </refer_field_variable_2>
								<symbol> = </symbol>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<whileStatement>
								<keyword> while </keyword>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_field_variable_2> field_2 </refer_field_variable_2>
									</term>
									<symbol> &lt; </symbol>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
								</expression>
								<symbol> ) </symbol>
								<symbol> { </symbol>
								<statements>
									<letStatement>
										<keyword> let </keyword>
										<refer_field_variable_1> field_1 </refer_field_variable_1>
										<symbol> [ </symbol>
										<expression>
											<term>
												<refer_field_variable_2> field_2 </refer_field_variable_2>
											</term>
										</expression>
										<symbol> ] </symbol>
										<symbol> = </symbol>
										<expression>
											<term>
												<refer_local_variable_2> local_2 </refer_local_variable_2>
												<symbol> [ </symbol>
												<expression>
													<term>
														<refer_local_variable_0> local_0 </refer_local_variable_0>
													</term>
													<symbol> - </symbol>
													<term>
														<symbol> ( </symbol>
														<expression>
															<term>
																<refer_field_variable_2> field_2 </refer_field_variable_2>
															</term>
															<symbol> + </symbol>
															<term>
																<integerConstant> 1 </integerConstant>
															</term>
														</expression>
														<symbol> ) </symbol>
													</term>
												</expression>
												<symbol> ] </symbol>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
									<letStatement>
										<keyword> let </keyword>
										<refer_field_variable_2> field_2 </refer_field_variable_2>
										<symbol> = </symbol>
										<expression>
											<term>
												<refer_field_variable_2> field_2 </refer_field_variable_2>
											</term>
											<symbol> + </symbol>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
								</statements>
								<symbol> } </symbol>
							</whileStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Array </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> dispose </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>
							<expression>
								<term>
									<refer_local_variable_2> local_2 </refer_local_variable_2>
								</term>
							</expression>
						</expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> int </keyword>
			<define_subroutine> newLine </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<integerConstant> 128 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> int </keyword>
			<define_subroutine> backSpace </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<integerConstant> 129 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> int </keyword>
			<define_subroutine> doubleQuote </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<integerConstant> 34 </integerConstant>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
	</class>
