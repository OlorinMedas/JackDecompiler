<class>
	<keyword> class </keyword>
	<define_class> Array </define_class>
	<symbol> { </symbol>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> Array </keyword>
			<define_subroutine> new </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<symbol> ~ </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
										</term>
										<symbol> &gt; </symbol>
										<term>
											<integerConstant> 0 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 2 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<returnStatement>
						<keyword> return </keyword>
						<expression>
							<term>
								<refer_class> Memory </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> alloc </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
							</term>
						</expression>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> method </keyword>
			<keyword> void </keyword>
			<define_subroutine> dispose </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Memory </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> deAlloc </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>
							<expression>
								<term>
									<keywordConstant> this </keywordConstant>
								</term>
							</expression>
						</expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
	</class>
