<class>
	<keyword> class </keyword>
	<define_class> Sys </define_class>
	<symbol> { </symbol>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> void </keyword>
			<define_subroutine> init </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Memory </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> init </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Math </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> init </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Screen </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> init </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Output </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> init </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Keyboard </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> init </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Main </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> main </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Sys </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> halt </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> void </keyword>
			<define_subroutine> halt </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<whileStatement>
						<keyword> while </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<keywordConstant> true </keywordConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
						</statements>
						<symbol> } </symbol>
					</whileStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> void </keyword>
			<define_subroutine> wait </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<varDec>
					<keyword> var </keyword>
					<keyword> type </keyword>
					<define_local_variable_0> local_0 </define_local_variable_0>
					<symbol> ; </symbol>
				</varDec>
				<statements>
					<ifStatement>
						<keyword> if </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
							<symbol> &lt; </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<doStatement>
								<keyword> do </keyword>
								<refer_class> Sys </refer_class>
								<symbol> . </symbol>
								<refer_subroutine> error </refer_subroutine>
								<symbol> ( </symbol>
								<expressionList>
									<expression>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
								</expressionList>
								<symbol> ) </symbol>
								<symbol> ; </symbol>
							</doStatement>
						</statements>
						<symbol> } </symbol>
					</ifStatement>
					<whileStatement>
						<keyword> while </keyword>
						<symbol> ( </symbol>
						<expression>
							<term>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
							</term>
							<symbol> &gt; </symbol>
							<term>
								<integerConstant> 0 </integerConstant>
							</term>
						</expression>
						<symbol> ) </symbol>
						<symbol> { </symbol>
						<statements>
							<letStatement>
								<keyword> let </keyword>
								<refer_local_variable_0> local_0 </refer_local_variable_0>
								<symbol> = </symbol>
								<expression>
									<term>
										<integerConstant> 50 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
							<whileStatement>
								<keyword> while </keyword>
								<symbol> ( </symbol>
								<expression>
									<term>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
									</term>
									<symbol> &gt; </symbol>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
								<symbol> { </symbol>
								<statements>
									<letStatement>
										<keyword> let </keyword>
										<refer_local_variable_0> local_0 </refer_local_variable_0>
										<symbol> = </symbol>
										<expression>
											<term>
												<refer_local_variable_0> local_0 </refer_local_variable_0>
											</term>
											<symbol> - </symbol>
											<term>
												<integerConstant> 1 </integerConstant>
											</term>
										</expression>
										<symbol> ; </symbol>
									</letStatement>
								</statements>
								<symbol> } </symbol>
							</whileStatement>
							<letStatement>
								<keyword> let </keyword>
								<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
								<symbol> = </symbol>
								<expression>
									<term>
										<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
									</term>
									<symbol> - </symbol>
									<term>
										<integerConstant> 1 </integerConstant>
									</term>
								</expression>
								<symbol> ; </symbol>
							</letStatement>
						</statements>
						<symbol> } </symbol>
					</whileStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
		<subroutineDec>
			<keyword> function </keyword>
			<keyword> void </keyword>
			<define_subroutine> error </define_subroutine>
			<symbol> ( </symbol>
			<parameterList>
				<keyword> int </keyword>
				<define_argument_variable_0> argument_0 </define_argument_variable_0>
			</parameterList>
			<symbol> ) </symbol>
			<subroutineBody>
				<symbol> { </symbol>
				<statements>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Output </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> printString </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>
							<expression>
								<term>
									<stringConstant> &quot;ERR&quot; </stringConstant>
								</term>
							</expression>
						</expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Output </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> printInt </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>
							<expression>
								<term>
									<refer_argument_variable_0> argument_0 </refer_argument_variable_0>
								</term>
							</expression>
						</expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<doStatement>
						<keyword> do </keyword>
						<refer_class> Sys </refer_class>
						<symbol> . </symbol>
						<refer_subroutine> halt </refer_subroutine>
						<symbol> ( </symbol>
						<expressionList>  </expressionList>
						<symbol> ) </symbol>
						<symbol> ; </symbol>
					</doStatement>
					<returnStatement>
						<keyword> return </keyword>
						<symbol> ; </symbol>
					</returnStatement>
				</statements>
				<symbol> } </symbol>
			</subroutineBody>
		</subroutineDec>
	</class>
